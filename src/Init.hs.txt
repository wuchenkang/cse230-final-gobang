module Init where

import Game
import Lens.Micro
import Brick
    ( neverShowCursor,
      modify,
      App(..),
      EventM,
      BrickEvent(AppEvent, VtyEvent),
      get ) 
import qualified Brick.Main as M
import Brick.Widgets.Border (border, borderWithLabel, hBorderWithLabel, vBorder, hBorder)
import Brick.Widgets.Border.Style (unicode, unicodeBold, unicodeRounded)
import Brick.Widgets.Center (center)
import Data.List (intersperse)
import qualified Graphics.Vty as V
import Control.Concurrent.STM
import Control.Monad.Trans (liftIO)


handleGameEvent :: BrickEvent () e -> EventM () Game ()
handleGameEvent (VtyEvent (V.EvKey k [])) = do
  case k of
    V.KUp    -> modify $ moveCursor North
    V.KDown  -> modify $ moveCursor South
    V.KLeft  -> modify $ moveCursor West
    V.KRight -> modify $ moveCursor East
  
    V.KChar 'w' -> modify $ moveCursor North
    V.KChar 's' -> modify $ moveCursor South
    V.KChar 'a' -> modify $ moveCursor West
    V.KChar 'd' -> modify $ moveCursor East
  
    V.KEnter -> do
      game <- get
      liftIO $ turnOffTimer game
      modify placeFocus
      afterPlacement
    V.KChar 'q' -> M.halt
    _ -> return ()
handleGameEvent _ = return ()

-- TODO: Time out to AI / PVP
handleEvent :: BrickEvent () GobangEvent -> EventM () Game ()
handleEvent (AppEvent (Placement (x, y))) = do
  modify (\g -> placePiece g x y)
  afterPlacement
handleEvent (AppEvent Countdown) = do
  game <- get
  s <- liftIO $ readTVarIO $ timerStatus game
  case s of
    ON -> do
      if tictoc game > 0
        then modify $ timerUpdate $ tictoc game - 1
        else do
          modify $ randomPlace
          afterPlacement
    -- conume dead countdown if any
    -- endgame
    _ -> return ()
handleEvent e = handleGameEvent e

initializeEvent :: EventM () Game ()
initializeEvent = do
  game <- get
  liftIO $ turnOnTimer game

app :: App Game GobangEvent ()
app = App 
  { appDraw         = drawUI
  , appChooseCursor = neverShowCursor
  , appHandleEvent  = handleEvent
  , appStartEvent   = initializeEvent
  , appAttrMap      = const attributes
  }